# ansible/game.yml
# Playbook for setting up the game EC2 instance (PokeAPI Game)

- name: Game EC2 Setup
  hosts: game_servers
  become: true
  vars:
    project_dir: "/home/ec2-user/distributed-pokeapp"
    game_app_dir: "{{ project_dir }}/pokeapi-game"
  tasks:
    - name: Ensure game app directory exists
      file:
        path: "{{ game_app_dir }}"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'

    - name: Copy game app code
      copy:
        src: "{{ game_app_dir }}/"
        dest: "{{ game_app_dir }}/"
        owner: ec2-user
        group: ec2-user
        mode: '0644'

    - name: Install Python dependencies for game
      pip:
        requirements: "{{ game_app_dir }}/requirements.txt"
        executable: pip3
      become: false # Run pip as ec2-user

    - name: Create .env file for game with backend API URL
      copy:
        dest: "{{ game_app_dir }}/.env"
        content: |
          BACKEND_API_URL=http://{{ backend_private_ip }}:5000
      owner: ec2-user
      group: ec2-user
      mode: '0644'

    - name: Start the PokeAPI Game application
      # This command will start your Flask game app in the background.
      # Adjust 'app.py' to your game's main file if it's different.
      # Ensure your Flask app is configured to listen on 0.0.0.0 for external access.
      shell: |
        cd "{{ game_app_dir }}"
        nohup python3 app.py > /var/log/pokeapi_game.log 2>&1 &
      args:
        chdir: "{{ game_app_dir }}"
      become: false # Run as ec2-user
      async: 1000 # Run in background, don't wait for completion
      poll: 0 # Don't poll for completion
    - name: Ensure game app is running
      command: pgrep -f "python3 app.py"
      register: game_app_status
      changed_when: false
      failed_when: game_app_status.stdout == "" # Fail if the app is not running  