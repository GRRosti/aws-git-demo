# ansible/backend.yml
# Playbook for setting up the backend EC2 instance (MongoDB + Flask API)

- name: Backend EC2 Setup
  hosts: backend_servers
  become: true
  vars:
    project_dir: "/home/ec2-user/distributed-pokeapp"
    backend_app_dir: "{{ project_dir }}/backend-app"
  tasks:
    - name: Ensure backend app directory exists
      file:
        path: "{{ backend_app_dir }}"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'

    - name: Copy backend Dockerfile and app code
      copy:
        src: "{{ backend_app_dir }}/"
        dest: "{{ backend_app_dir }}/"
        owner: ec2-user
        group: ec2-user
        mode: '0644' # Default for files, directories will retain 0755

    - name: Create docker-compose.yml for backend
      copy:
        dest: "{{ backend_app_dir }}/docker-compose.yml"
        content: |
          version: '3.8'
          services:
            mongodb:
              image: mongo:latest
              container_name: mongodb
              ports:
                - "27017:27017" # Expose MongoDB for potential host access (optional, but useful for debugging)
              volumes:
                - mongodb_data:/data/db # Persist MongoDB data
              restart: always
            flask-api:
              build: .
              container_name: flask-api
              ports:
                - "5000:5000" # Expose Flask API
              environment:
                # MongoDB host is the service name in docker-compose network
                MONGO_URI: "mongodb://mongodb:27017/pokeapi_db"
              depends_on:
                - mongodb
              restart: always
          volumes:
            mongodb_data:
      owner: ec2-user
      group: ec2-user
      mode: '0644'

    - name: Build and run Docker containers for backend
      community.docker.docker_compose:
        project_src: "{{ backend_app_dir }}"
        state: present
      environment:
        HOME: /home/ec2-user # Ensure docker-compose runs as ec2-user
      become: false # Run docker-compose as ec2-user
    - name: Ensure backend app is running
      command: docker ps -q --filter "name=flask-api"
      register: backend_app_status
      changed_when: false
      failed_when: backend_app_status.stdout == ""  